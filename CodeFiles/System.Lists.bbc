using System;
using System.Memory;

template<T>
class Array
{
    private int capacity;

    export int Length() { return this.capacity; }

    export String ToString()
    {
        int capacity = this.capacity;
        String result = "";
        for (int i; i < capacity; i++)
        {
            if (i > 0) {
                result = (temp result) + ", ";
            };

            result = (temp result) + (temp this[i].ToString());
        };
        return "{ " + (temp result) + " }";
    }
    
    export T indexer_get(int index)
    {
        if (index < 0 || index >= this.capacity)
        { throw "Index out of range exception"; };
        return *((&this) + 1 + index * sizeof(T));
    }

    export void indexer_set(int index, T value)
    {
        if (index < 0 || index >= this.capacity)
        { throw "Index out of range exception"; };
        *((&this) + 1 + index * sizeof(T)) = value;
    }
    
    export constructor(int capacity)
    {
        int pointer = Alloc(1 + capacity * sizeof(T));
        Array<T> result = pointer as Array<T>;
        result.capacity = capacity;
        return result;
    }

    export destructor()
    {
        delete &this;
    }
}

class Map
{
    private int pointer;
    int length;
    int width;

    export int Get(int x, int y)
    {
        int index = y * this.width + x;
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *(this.pointer + index);
    }

    int Get(int index)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *(this.pointer + index);
    }
  
    export void Set(int x, int y, int element)
    {
        int index = y * this.width + x;
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        *(this.pointer + index) = element;
    }
    
    export String ToString()
    {
        int length = this.length;
        String result = "";
        for (int i; i < length; i++)
        {
            if (i > 0) {
                result = result + ", ";
            };
            int element = this.Get(i);
            result = result + element.ToString();
        };
        return "{ " + result + " }";
    }

    export constructor(int width, int height)
    {
        int length = height * width;
        Map result = new Map;
        result.pointer = Alloc(length);
        result.length = length;
        result.width = width;
        for (int i = 0; i < length; i++)
        {
            *(result.pointer + i) = 0;
        };
        return result;
    }

    export destructor()
    {
        delete this.pointer;
        delete &this;
    }

    export bool OutOf(int x, int y)
    {
        return (x < 0 || y < 0 || x > this.width || y > (this.length / this.width));
    }
}

template<T>
class Stack
{
    private int length;
    private int capacity;
    private Array<T> array;
    
    export T indexer_get(int index)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *((&this.array) + 1 + index * sizeof(T));
    }

    export void indexer_set(int index, T value)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        *((&this.array) + 1 + index * sizeof(T)) = value;
    }
    
    export constructor(int capacity)
    {
        Stack<T> result = new Stack<T>;
        result.capacity = capacity;
        result.array = new Array<T>(capacity);
        result.length = 0;
        return result;
    }

    export void Push(T item)
    {
        if (this.capacity <= this.length)
        {
            Array<T> newArray = new Array<T>(this.capacity + 1);
            for (int i; i < this.capacity; i++)
            {
                newArray[i] = this.array[i];
            }
            newArray[this.capacity] = item;
            delete this.array;
            this.array = newArray;
            this.capacity++;
            this.length++;
        }
        else
        {
            this.array[this.length] = item;
            this.length++;
        }
    }

    export T Pop()
    {
        if (this.length <= 0)
        { throw "Stack contains no elements to pop"; }
        int lastIndex = this.length - 1;
        T result = this.array[lastIndex];
        this.length--;
        return result;
    }
    
    export String ToString()
    {
        if (this.length)
        {
            String result = "{ ";

            for (int i; i < this.length; i++)
            {
                if (i > 0) { result = (temp result) + ", "; }
                result = (temp result) + (temp this.array[i].ToString());
            }

            result += " }";
            return result;
        }
        else
        {
            return "{ }";
        }
    }
}

template<T>
class LinkedNode
{
    T Value;
    LinkedNode<T> Next;

    export constructor(T value)
    {
        LinkedNode<T> result = new LinkedNode<T>;
        result.Value = value;
        return result;
    }

    export destructor()
    {
        if (this.Next)
        { delete this.Next; }
        delete &this;
    }
}

template<T>
class LinkedList
{
    LinkedNode<T> Root;

    export int Length() {
        int n = 1;
        if (this.Root)
        {
            LinkedNode<T> current = this.Root;
            while (current.Next) {
                n++;
                current = current.Next;
            };
        }
        else
        {
            n = 0;
        };
        return n;
    }

    export void Add(T value) {
        if (this.Root)
        {
            LinkedNode<T> current = this.Root;
            while (current.Next) {
                current = current.Next;
            };
            current.Next = new LinkedNode<T>(value);
        }
        else
        {
            this.Root = new LinkedNode<T>(value);
        };
    }
    
    export String ToString()
    {
        if (this.Root)
        {
            LinkedNode<T> current = this.Root;
            
            String result = current.Value.ToString();

            while (current.Next) {
                current = current.Next;

                result = result + ", " + current.Value.ToString();
            };
            return "{ " + result + " }";
        } else {
            return "{ }";
        };
    }

    export void Clear()
    {
        if (this.Root)
        {
            delete this.Root;
            this.Root = 0 as LinkedNode<T>;
        }
    }
}

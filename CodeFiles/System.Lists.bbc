using System;

[Define("array")]
template<T>
class Array
{
    private int capacity;

    export String ToString()
    {
        int capacity = this.capacity;
        String result = "";
        for (int i; i < capacity; i++)
        {
            if (i > 0) {
                result += ", ";
            };

            result += this[i].ToString();
        };
        return "{ " + result + " }";
    }
    
    export T indexer_get(int index)
    {
        if (index < 0 || index >= this.capacity)
        { throw "Index out of range exception"; };
        return *((&this) + 1 + index * sizeof(T));
    }

    export void indexer_set(int index, T value)
    {
        if (index < 0 || index >= this.capacity)
        { throw "Index out of range exception"; };
        *((&this) + 1 + index * sizeof(T)) = value;
    }
    
    export constructor(int capacity)
    {
        int pointer = Alloc(1 + capacity * sizeof(T));
        Array<T> result = pointer as Array<T>;
        result.capacity = capacity;
        return result;
    }

    export destructor()
    {
        delete &this;
    }
}

class Map
{
    private int pointer;
    int length;
    int width;

    export int Get(int x, int y)
    {
        int index = y * this.width + x;
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *(this.pointer + index);
    }

    int Get(int index)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *(this.pointer + index);
    }
  
    export void Set(int x, int y, int element)
    {
        int index = y * this.width + x;
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        *(this.pointer + index) = element;
    }
    
    export String ToString()
    {
        int length = this.length;
        String result = "";
        for (int i; i < length; i++)
        {
            if (i > 0) {
                result = result + ", ";
            };
            int element = this.Get(i);
            result = result + element.ToString();
        };
        return "{ " + result + " }";
    }

    export constructor(int width, int height)
    {
        int length = height * width;
        Map result = new Map;
        result.pointer = Alloc(length);
        result.length = length;
        result.width = width;
        for (int i = 0; i < length; i++)
        {
            *(result.pointer + i) = 0;
        };
        return result;
    }

    export destructor()
    {
        delete this.pointer;
        delete &this;
    }

    export bool OutOf(int x, int y)
    {
        return (x < 0 || y < 0 || x > this.width || y > (this.length / this.width));
    }
}

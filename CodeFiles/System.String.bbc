using System;
using System.Memory;

macro UnsafeGet(list, index)
{
    return *(&list + 1 + index);
}

macro UnsafeSet(list, index, value)
{
    *(&list + 1 + index) = value;
}

[Define("string")]
class String
{
    int length;

    export constructor(int length)
    {
        int pointer = Alloc(sizeof(String) + length);
        
        *pointer = length;

        return pointer as String;
    }

    export constructor(int length, char character)
    {
        int pointer = Alloc(sizeof(String) + length);

        *pointer = length;

        for (int offset; offset < length; offset++)
        {
            *(pointer + sizeof(String) + offset) = character;
        };

        return pointer as String;
    }

    export clone(temp String other)
    {
        String result = new String(other.length);
        for (int i; i < other.length; i++)
        {
            UnsafeSet(result, i, UnsafeGet(other, i));
        };
        return result;
    }

    export String +(temp String a, temp String b)
    {
        int al = a.length;
        int bl = b.length;

        int lengthSum = al + bl;

        String result = new String(lengthSum);
  
        for (int i; i < al; i++)
        {
            UnsafeSet(result, i, UnsafeGet(a, i));
        };
  
        for (int i; i < bl; i++)
        {
            UnsafeSet(result, al + i, UnsafeGet(b, i));
        };

        return result;
    }
    
    export String +(temp String a, int b)
    {
        return a + temp b.ToString();
    }
    
    export String +(int a, temp String b)
    {
        return temp a.ToString() + b;
    }
    
    export bool ==(temp String a, temp String b)
    {
        int length = a.length;

        if (length != b.length) { return false; };

        for (int i = 0; i < length; i++)
        {
            char _a = UnsafeGet(a, i) as char;
            char _b = UnsafeGet(b, i) as char;
            
            if (_a != _b)
            {
                return false;
            };
        };

        return true;
    }
    
    export char indexer_get(int index)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *((&this) + sizeof(String) + index);
    }
    
    export void indexer_set(int index, char element)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        *((&this) + sizeof(String) + index) = element;
    }
}

export void CopyString(temp String from, String to)
{
    int newLength = Min(from.length, to.length);
    for (int i; i < newLength; i++)
    {
        UnsafeSet(to, i, UnsafeGet(from, i));
    };
}

export String Substring(temp this String v, int start)
{
    int newLength = 0;
    for (int i = start; i < v.length; i++)
    {
        newLength++;
    };
    String newV = new String(newLength);
    for (int i = start; i < v.length; i++)
    {
        UnsafeSet(newV, i - start, UnsafeGet(v, i));
    };
    return newV;
}

export String Substring(temp this String v, int start, int length)
{
    String newV = new String(Min(v.length, start + length));
    for (int i = start; i < Min(v.length, start + length); i++)
    {
        UnsafeSet(newV, i - start, UnsafeGet(v, i));
    };
    return newV;
}

export String Reverse(temp this String v)
{
    String newV = new String(v.length);
    for (int i = 0; i < v.length; i++)
    {
        UnsafeSet(newV, i, UnsafeGet(v, v.length - 1 - i));
    };
    return newV;
}

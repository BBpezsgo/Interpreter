#bf "sleep" "void" "int";

#bf "stdout" "void" "char";
#bf "stderr" "void" "char";
#bf "stdin" "char";

#bf "console-set" "void" "char" "int" "int";
#bf "console-clear" "void";

#bf "int-to-float" "float" "int";
#bf "float-to-int" "int" "float";

[Builtin("stdout")]
export void Print(char data);
  
[Builtin("stderr")]
export void PrintError(char data);
  
[Builtin("console-set")]
export void Set(char data, int x, int y);

[Builtin("console-clear")]
export void Clear();

[Define("boolean")]
enum bool
{
    False = 0,
    True = 1,
}

export void Print(String message)
{
    int length = message.Length();
    for (int i; i < length; i++)
    {
        Print(message.At(i));
    };
}

export void PrintD(String message)
{
    Print(message);
    delete message;
}
  
export void PrintLine()
{
    PrintD("\r\n");
}
  
export void PrintLine(String message)
{
    Print(message);
    PrintD("\r\n");
}
  
export void PrintLineD(String message)
{
    PrintD(message);
    PrintD("\r\n");
}
  
export void PrintLine(int message)
{
    PrintLineD(message.ToString());
}
  
export void PrintLine(byte message)
{
    PrintLineD(message.ToString());
}
  
[Builtin("stdin")]
export char ReadKey();

export String ReadLine() {
    String result = new String(0);
    while (true)
    {
        char inpChar = ReadKey();
        if (inpChar == '\n') { break; };
        if (inpChar == '\r') { break; };

        String newResult = new String(result.Length() + 1);

        for (int i = 0; i < result.Length(); i++)
        {
            newResult.Set(i, result.At(i));
        };

        newResult.Set(result.Length(), inpChar);
      
        delete result;

        result = newResult;
    };
    return result;
}

char DigitToChar(int digit)
{
      if (digit == 0) { return '0'; }
      elseif (digit == 1) { return '1'; }
      elseif (digit == 2) { return '2'; }
      elseif (digit == 3) { return '3'; }
      elseif (digit == 4) { return '4'; }
      elseif (digit == 5) { return '5'; }
      elseif (digit == 6) { return '6'; }
      elseif (digit == 7) { return '7'; }
      elseif (digit == 8) { return '8'; }
      elseif (digit == 9) { return '9'; };  
}

char DigitToChar(byte digit)
{
      if (digit == 0) { return '0'; }
      elseif (digit == 1) { return '1'; }
      elseif (digit == 2) { return '2'; }
      elseif (digit == 3) { return '3'; }
      elseif (digit == 4) { return '4'; }
      elseif (digit == 5) { return '5'; }
      elseif (digit == 6) { return '6'; }
      elseif (digit == 7) { return '7'; }
      elseif (digit == 8) { return '8'; }
      elseif (digit == 9) { return '9'; };  
}

export String ToString(this byte number)
{
	String result = CreateString(0);

	if (number == 0) {
	      delete result;
	      result = "0";
	      return result;
	};

	byte v = number;

	while (v > 0)
	{
        byte rem = v % 10;
		
		String newResult = CreateString(result.Length() + 1);
		CopyString(result, newResult);
		newResult.Set(result.Length(), DigitToChar(rem));
		delete result;
		result = newResult;

		v = v / 10;
	};

	String reversed = result.Reverse();
	delete result;
	result = reversed;

	return result;
}

export String ToString(this int number)
{
	String result = CreateString(0);

	if (number == 0) {
	      delete result;
	      result = "0";
	      return result;
	};

	int v = number;

	bool isNegative = false;
	if (v < 0)
	{
		isNegative = true;
		v = 0 - v;
	};

	while (v > 0)
	{
        int rem = v % 10;
		
		String newResult = CreateString(result.Length() + 1);
		CopyString(result, newResult);
		newResult.Set(result.Length(), DigitToChar(rem));
		delete result;
		result = newResult;

		v = v / 10;
	};

	if (isNegative)
	{
	      String newResult = CreateString(result.Length() + 1);
	      CopyString(result, newResult);
	      newResult.Set(result.Length(), '-');
	      delete result;
	      result = newResult;
	};

	String reversed = result.Reverse();
	delete result;
	result = reversed;

	return result;
}

[Builtin("sleep")]
export void Sleep(int ms);

export int Pow(int a, int b)
{
    if (b == 0) { return 1; };
    if (b < 0)
    { return 1 / Pow(a, Abs(b)); };
    int answer = 1;
    for (int i = 1; i <= b; i++)
    { answer = answer * a; };
    return answer;
}

export int Abs(int v)
{
    if (v < 0) { return v * -1; };
    return v;
}
  
export int Min(int a, int b)
{
    if (a < b) { return a; };
    return b;
}

export int Max(int a, int b)
{
    if (a > b) { return a; };
    return b;
}

export String Substring(this String v, int start)
{
    int newLength = 0;
    for (int i = start; i < v.Length(); i++)
    {
        newLength++;
    };
    String newV = CreateString(newLength);
    for (int i = start; i < v.Length(); i++)
    {
        newV.Set(i - start, v.At(i));
    };
    return newV;
}

export String Reverse(this String v)
{
    String newV = CreateString(v.Length());
    for (int i = 0; i < v.Length(); i++)
    {
        newV.Set(i, v.At(v.Length() - 1 - i));
    };
    return newV;
}

export String Substring(this String v, int start, int length)
{
    String newV = CreateString(Min(v.Length(), start + length));
    for (int i = start; i < Min(v.Length(), start + length); i++)
    {
        newV.Set(i - start, v.At(i));
    };
    return newV;
}

export int ParseInt(String v)
{
    bool IsNegative = (v.At(0) == '-');
    String parsing = v;
    if (IsNegative) { parsing = parsing.Substring(1); };
    parsing = parsing.Reverse();
    int result = 0;
    for (int i = 0; i < parsing.Length(); i++)
    {
        char digit = parsing.At(i);
        result += (Pow(10, i) * ParseDigit(digit));
    };
    if (IsNegative)
    { result *= -1; };
    return result;
}

export byte ParseByte(String v)
{
    bool IsNegative = (v.At(0) == '-');
    String parsing = v;
    if (IsNegative) { parsing = parsing.Substring(1); };
    parsing = parsing.Reverse();
    int result = 0;
    for (int i = 0; i < parsing.Length(); i++)
    {
        char digit = parsing.At(i);
        result += (Pow(10, i) * ParseDigit(digit));
    };
    if (IsNegative)
    { result *= -1; };
    return result;
}

int ParseDigit(char digit)
{
    if (digit == '0') { return 0; }
    elseif (digit == '1') { return 1; }
    elseif (digit == '2') { return 2; }
    elseif (digit == '3') { return 3; }
    elseif (digit == '4') { return 4; }
    elseif (digit == '5') { return 5; }
    elseif (digit == '6') { return 6; }
    elseif (digit == '7') { return 7; }
    elseif (digit == '8') { return 8; }
    elseif (digit == '9') { return 9; };
}

[Builtin("int-to-float")]
export float ToFloat(this int v);

[Builtin("float-to-int")]
export int ToInt(this float v);

[Define("string")]
class String
{
    private int pointer;
    private int length;

    export int Length() { return this.length; }

    export constructor(int length)
    {
        String result = new String;
        result.pointer = Alloc(length);
        result.length = length;
        for (int i = 0; i < length; i++)
        {
            *(result.pointer + i) = '\0';
        };
        return result;
    }

    export clone(String other)
    {
        String result = new String(other.Length());
        for (int i; i < other.Length(); i++)
        {
            result.Set(i, other.At(i));
        };
        return result;
    }

    export String +(String a, String b)
    {
        int al = a.Length();
        int bl = b.Length();

        int lengthSum = al + bl;
        String result = CreateString(lengthSum);
  
        for (int i; i < al; i++)
        {
            result.Set(i, a.At(i));
        };
  
        for (int i; i < bl; i++)
        {
            result.Set(al + i, b.At(i));
        };

        delete a;
        delete b;

        return result;
    }

    export char At(int index)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        return *(this.pointer + index);
    }

    export void Set(int index, char element)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; };
        *(this.pointer + index) = element;
    }

    export destructor()
    {
        Dealloc(this.pointer, this.length);
        Dealloc(&this, sizeof(this));
    }
}

export String CreateString(int length)
{
    String result = new String;
    result.pointer = Alloc(length);
    result.length = length;
    for (int i = 0; i < length; i++)
    {
        *(result.pointer + i) = '\0';
    };
    return result;
}

export void CopyString(String from, String to)
{
    int newLength = Min(from.Length(), to.Length());
    for (int i; i < newLength; i++)
    {
        to.Set(i, from.At(i));
    };
}

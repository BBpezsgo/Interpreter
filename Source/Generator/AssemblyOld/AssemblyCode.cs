using LanguageCore.Runtime;

namespace LanguageCore.Assembly;

[ExcludeFromCodeCoverage]
public class AssemblyCode
{
    const string EntryPointSymbol = "_start";

    public readonly TextSectionBuilder CodeBuilder;
    public readonly DataSectionBuilder DataBuilder;

    public AssemblyCode()
    {
        CodeBuilder = new TextSectionBuilder()
        {
            Indent = SectionBuilder.IndentIncrement,
        };
        DataBuilder = new DataSectionBuilder()
        {
            Indent = SectionBuilder.IndentIncrement,
        };
    }

    public string Make(BitWidth bits)
    {
        StringBuilder builder = new();

        builder.AppendLine(";");
        builder.AppendLine("; WARNING: Generated by BB's compiler!");
        builder.AppendLine(";");
        builder.AppendLine();

        switch (bits)
        {
            case BitWidth._8:
                throw new NotImplementedException($"8 bit mode aint supported");
            case BitWidth._16:
                builder.AppendLine("[BITS 16]");
                // builder.AppendLine("ORG 100h");
                break;
            case BitWidth._32:
                builder.AppendLine("[BITS 32]");
                break;
            case BitWidth._64:
                builder.AppendLine("[BITS 64]");
                break;
        }

        if (CodeBuilder.Imports.Count > 0)
        {
            builder.AppendLine(";");
            builder.AppendLine("; External functions");
            builder.AppendLine(";");
            foreach (string import in CodeBuilder.Imports)
            {
                builder.AppendLine($"extern {import}");
            }
            builder.AppendLine();
        }

        if (bits != BitWidth._16)
        {
            builder.AppendLine(";");
            builder.AppendLine("; Global functions");
            builder.AppendLine(";");
            builder.AppendLine($"global {EntryPointSymbol}");
            builder.AppendLine();
        }

        builder.AppendLine(";");
        builder.AppendLine("; Code Section");
        builder.AppendLine(";");
        if (bits != BitWidth._16)
        { builder.AppendLine("section .text"); }
        builder.AppendLine();
        builder.AppendLine($"{EntryPointSymbol}:");

        builder.Append(CodeBuilder.Builder);
        builder.AppendLine();

        if (DataBuilder.Builder.Length > 0)
        {
            builder.AppendLine(";");
            builder.AppendLine("; Data Section");
            builder.AppendLine(";");
            builder.AppendLine("section .rodata");
            builder.Append(DataBuilder.Builder);
            builder.AppendLine();
        }

        return builder.ToString();
    }
}

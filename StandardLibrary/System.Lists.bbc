using System;
using System.Memory;

template<T>
struct List
{
    private int _capacity;
    private int _length;
    private T* _ptr;

    export int Length() { return this._length; }
    
    export void Clear() { this._length = 0; }

    export char* ToString()
    {
        char* result = "";
        
        int length = this._length;
        for (int i; i < length; i++)
        {
            if (i > 0)
            { result = (temp result) + ", "; }

            result = (temp result) + (temp this._ptr[i].ToString());
        }
        
        return "{ " + (temp result) + " }";
    }
    
    export T indexer_get(int index)
    {
        if (index < 0 || index >= this._length)
        { throw "Index out of range exception"; }
        return this._ptr[index];
    }

    export void indexer_set(int index, T value)
    {
        if (index < 0 || index >= this._length)
        { throw "Index out of range exception"; }
        this._ptr[index] = value;
    }
    
    export List<T>*(int capacity)
    {
        this._capacity = capacity;
        this._length = 0;
        this._ptr = Alloc(capacity * sizeof(T));
    }

    export destructor()
    {
        delete this._ptr as int*;
    }

    export void Add(T item)
    {
        if (this._length + 1 >= this._capacity)
        {
            if (this._capacity)
            { this.EnsureCapacity(this._capacity * 2); }
            else
            { this.EnsureCapacity(4); }
        }
        this._length++;
        this._ptr[this._length - 1] = item;
    }

    export T Remove(int index)
    {
        if (index < 0 || index >= this._length)
        { throw "Index out of range exception"; }
        T removed = this._ptr[index];
        
        int length = this._length;
        for (int i = index + 1; i < length; i++)
        {
            this._ptr[i - 1] = this._ptr[i];
        }

        this._length--;
        return removed;
    }

    void EnsureCapacity(int capacity)
    {
        if (this._capacity < capacity)
        {
            var old = this._ptr;
            this._ptr = Alloc(capacity * sizeof(T));
            this._capacity = capacity;

            if (old)
            {
                int length = this._length;
                for (int i = 0; i < length; i++)
                {
                    this._ptr[i] = old[i];
                }

                delete old as int*;
            }
        }
    }
}

template<T>
class Stack
{
    private int length;
    private int capacity;
    private T* array;
    
    export T indexer_get(int index)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; }
        return *((&this.array) + 1 + index * sizeof(T));
    }

    export void indexer_set(int index, T value)
    {
        if (index < 0 || index >= this.length)
        { throw "Index out of range exception"; }
        *((&this.array) + 1 + index * sizeof(T)) = value;
    }
    
    export constructor(int capacity)
    {
        Stack<T> result = new Stack<T>;
        result.capacity = capacity;
        result.array = Alloc(capacity * sizeof(T));
        result.length = 0;
        return result;
    }

    export void Push(T item)
    {
        if (this.capacity <= this.length)
        {
            T* newArray = Alloc((this.capacity + 1) * sizeof(T));
            for (int i; i < this.capacity; i++)
            {
                newArray[i] = this.array[i];
            }
            newArray[this.capacity] = item;
            delete this.array;
            this.array = newArray;
            this.capacity++;
            this.length++;
        }
        else
        {
            this.array[this.length] = item;
            this.length++;
        }
    }

    export T Pop()
    {
        if (this.length <= 0)
        { throw "Stack contains no elements to pop"; }
        int lastIndex = this.length - 1;
        T result = this.array[lastIndex];
        this.length--;
        return result;
    }
    
    export char* ToString()
    {
        if (this.length)
        {
            char* result = "{ ";

            for (int i; i < this.length; i++)
            {
                if (i > 0) { result = (temp result) + ", "; }
                result = (temp result) + (temp this.array[i].ToString());
            }

            result += " }";
            return result;
        }
        else
        {
            return "{ }";
        }
    }
}

template<T>
class LinkedNode
{
    T Value;
    LinkedNode<T> Next;

    export constructor(T value)
    {
        LinkedNode<T> result = new LinkedNode<T>;
        result.Value = value;
        return result;
    }

    export destructor()
    {
        if (this.Next)
        { delete this.Next; }
        delete &this;
    }
}

template<T>
class LinkedList
{
    LinkedNode<T> Root;

    export int Length()
    {
        int n = 1;
        if (this.Root)
        {
            LinkedNode<T> current = this.Root;
            while (current.Next) {
                n++;
                current = current.Next;
            };
        }
        else
        {
            n = 0;
        }
        return n;
    }

    export void Add(T value)
    {
        if (this.Root)
        {
            LinkedNode<T> current = this.Root;
            while (current.Next) {
                current = current.Next;
            };
            current.Next = new LinkedNode<T>(value);
        }
        else
        {
            this.Root = new LinkedNode<T>(value);
        }
    }
    
    export char* ToString()
    {
        if (this.Root)
        {
            LinkedNode<T> current = this.Root;
            
            char* result = current.Value.ToString();

            while (current.Next) {
                current = current.Next;

                result = result + ", " + current.Value.ToString();
            };
            return "{ " + result + " }";
        } else {
            return "{ }";
        }
    }

    export void Clear()
    {
        if (this.Root)
        {
            delete this.Root;
            this.Root = 0 as LinkedNode<T>;
        }
    }
}

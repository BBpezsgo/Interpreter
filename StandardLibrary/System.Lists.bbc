using System.Memory;

template<T>
struct List
{
    private int _capacity;
    private int _length;
    private T[]* _ptr;

    export inline int Length() { return this._length; }

    export inline void Clear() { this._length = 0; }

    export inline T[]* Raw() { return this._ptr; }

    export T indexer_get(int index)
    {
        if (index < 0 || index >= this._length)
        { crash "Index out of range exception"; }
        return this._ptr[index];
    }

    export void indexer_set(int index, T value)
    {
        if (index < 0 || index >= this._length)
        { crash "Index out of range exception"; }
        this._ptr[index] = value;
    }

    export List<T>(int capacity)
    {
        this._capacity = capacity;
        this._length = 0;
        this._ptr = Alloc(capacity * sizeof(T)) as T[]*;
    }

    export List<T>*(int capacity)
    {
        this._capacity = capacity;
        this._length = 0;
        this._ptr = Alloc(capacity * sizeof(T)) as T[]*;
    }

    export destructor()
    {
        if (this._ptr)
        { delete this._ptr as int*; }
    }

    export void Add(T item)
    {
        if (this._length + 1 > this._capacity)
        {
            if (this._capacity)
            { this.EnsureCapacity(this._capacity * 2); }
            else
            { this.EnsureCapacity(4); }
        }
        this._ptr[this._length] = item;
        this._length++;
    }

    export T Remove(int index)
    {
        if (index < 0 || index >= this._length)
        { crash "Index out of range exception"; }
        T removed = this._ptr[index];
        
        int length = this._length;
        for (int i = index + 1; i < length; i++)
        {
            this._ptr[i - 1] = this._ptr[i];
        }

        this._length--;
        return removed;
    }

    void EnsureCapacity(int capacity)
    {
        if (this._capacity < capacity)
        {
            var old = this._ptr;
            this._ptr = Alloc(capacity * sizeof(T)) as T[]*;
            this._capacity = capacity;

            if (old)
            {
                int length = this._length;
                for (int i = 0; i < length; i++)
                {
                    this._ptr[i] = old[i];
                }

                delete old as int*;
            }
        }
    }
}

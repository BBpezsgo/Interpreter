/*
 * Calculates the sine of `x` using the Taylor series
 *
 * Source: https://stackoverflow.com/a/67122267
 */
export inline float Sin(float x)
{
    float value = x;
    float sum = value;
    int fac = 1;
    
    for (int counter = 0; counter < 100; counter++)
	{
        fac += 2;
        value *= -1 * x * x / ((float)(fac * (fac - 1)));
        sum += value;
    }

    return sum;
}

/*
 * Calculates the cosine of `x` using the Taylor series
 * 
 * Source: https://stackoverflow.com/a/67122267
 */
export inline float Cos(float x)
{
    float value = 1f;
    float sum = value;
    int fac = 0;
    
    for (int counter = 0; counter < 100; counter++)
	{
        fac += 2;
        value *= -1 * x * x / ((float)(fac * (fac - 1)));
        sum += value;
    }

    return sum;
}

/*
 * Calculates the value of `base` to the power of `exp`
 * 
 * Source: https://stackoverflow.com/a/101613
 */
export int Pow(int base, int exp)
{
    int result = 1;

    while (1)
    {
        if (exp & 1)
        { result *= base; }
        exp = exp >> 1;
        if (!exp)
        { break; }
        base *= base;
    }

    return result;
}

/*
 * Calculates the absolute value of `v`
 */
export int Abs(int v)
{
    if (v < 0) { return v * -1; };
    return v;
}

/*
 * Calculates the absolute value of `v`
 */
export f32 Abs(f32 v)
{
    if (v < 0f) { return v * -1f; };
    return v;
}

export int Min(int a, int b)
{
    if (a < b) { return a; };
    return b;
}

export f32 Min(f32 a, f32 b)
{
    if (a < b) { return a; };
    return b;
}

export int Max(int a, int b)
{
    if (a > b) { return a; };
    return b;
}

export f32 Max(f32 a, f32 b)
{
    if (a > b) { return a; };
    return b;
}

/*
// https://www.geeksforgeeks.org/c-program-to-find-square-root-of-a-given-number/
float Sqrt(int number)
{
    int start = 0;
    int end = number;
    int mid;
 
    // To store the answer
    float ans;
 
    // To find integral part of square
    // root of number
    while (start <= end)
    {
 
        // Find mid
        mid = (start + end) / 2;
 
        // If number is perfect square
        // then break
        if (mid * mid == number)
        {
            ans = (float)mid;
            break;
        }
 
        // Increment start if integral part lies on right side of the mid
        if (mid * mid < number)
        {
            // first start value should be added to answer
            ans = (float)start;
            // then start should be changed
            start = mid + 1;
        }
        // Decrement end if integral part lies on the left side of the mid
        else
        {
            end = mid - 1;
        }
    }
 
    // To find the fractional part of square root upto 5 decimal
    float increment = 0.1;
    for (int i = 0; i < 5; i++)
    {
        while (ans * ans <= number)
        {
            ans += (float)increment;
        }
 
        // Loop terminates, when ans * ans > number
        ans = ans - ((float)increment);
        increment = increment / 10;
    }
    return ans;
}

// https://stackoverflow.com/a/1101217
int Sqrt(int number)
{
    int op  = number;
    int res = 0;
    int one = 1 << 30; // The second-to-top bit is set: use 1u << 14 for uint16_t type; use 1uL<<30 for uint32_t type

    // "one" starts at the highest power of four <= than the argument.
    while (one > op)
    {
        one = one >> 2;
    }

    while (one != 0)
    {
        if (op >= res + one)
        {
            op = op - (res + one);
            res = res + 2 * one;
        }
        res = res >> 1;
        one = one >> 2;
    }

    // Do arithmetic rounding to nearest integer
    if (op > res)
    {
        res++;
    }

    return res;
}
*/

/*
 * Calculates the square root of `s`
 * 
 * Source: https://en.wikipedia.org/wiki/Integer_square_root
 */
export int Sqrt(int s)
{
    // Zero yields zero
    // One yields one
    if (s <= 1) 
        return s;

    // Initial estimate (must be too high)
    int x0 = s / 2;

    // Update
    int x1 = (x0 + s / x0) / 2;

    while (x1 < x0)	// Bound check
    {
        x0 = x1;
        x1 = (x0 + s / x0) / 2;
    }

    return x0;
}

/**
 * Calculates the base 10 logarithm of `v`
 */
export inline int Log10(i32 v)
{
    if (v >= 1000000000) { return 9; }
    if (v >= 100000000) { return 8; }
    if (v >= 10000000) { return 7; }
    if (v >= 1000000) { return 6; }
    if (v >= 100000) { return 5; }
    if (v >= 10000) { return 4; }
    if (v >= 1000) { return 3; }
    if (v >= 100) { return 2; }
    if (v >= 10) { return 1; }
    return 0;
}

/**
 * Calculates the base 10 logarithm of `v`
 */
export inline byte Log10(u8 v)
{
    if (v >= 100) { return (u8)2; }
    if (v >= 10) { return (u8)1; }
    return (u8)0;
}

/**
 * Source: https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Approximations_that_depend_on_the_floating_point_representation
 */
export float Sqrt(float z)
{
    int* _z = (&z) as int*;
	*_z = (((*_z) - (1 << 23)) >> 1) + (1 << 29);
	return *(_z as float*);
}

export float Round(float v)
{
    f32 frac = v % 1f;
    if (v < 0.5f)
    {
        return v - frac;
    }
    else
    {
        return v + 1f - frac;
    }
}

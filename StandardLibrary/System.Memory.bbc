void GetHeader(int ptr, ref int size, ref int allocated) {
	int value = (*ptr) as int;
	if (value >= 127) {
		value -= 127;

		size = value;
		allocated = 1;
	} else {
		size = value;
		allocated = 0;
	};
}

void SetHeader(int ptr, int size, int allocated) {
	int value = size;
	if (allocated) {
		value += 127;
	};
	*ptr = value;
}

void FixSize(ref int size) {
    if (size == 0) {
        size++;
    };
}

[Builtin("alloc")]
export int Alloc(int sizeNeed)
{
    FixSize(ref sizeNeed);
    
    // Print("Allocating ");
    // Print(sizeNeed);
    // Print(" ...");
    // PrintLine();

    int headerPointer = 0;
    while (1)
    {
        int blockSize;
        int blockUsed;
        GetHeader(headerPointer, ref blockSize, ref blockUsed);
        int dataPointer = headerPointer + 1;
        
        // Print("Block #");
        // Print(headerPointer);
        // Print(": ");
        // Print("Size: ");
        // Print(blockSize);
        // Print("  Used: ");
        // Print(blockUsed);
        // PrintLine();

        if (blockUsed == 0)
        {
            // If the block's size is perfect
            if (blockSize == sizeNeed)
            {
                // Update the current block's header
                SetHeader(headerPointer, sizeNeed, 1);
                
                // PrintLine("Perfect match");

                return dataPointer;
            };
            
            // If the block's size is larger than needed
            if (blockSize > sizeNeed)
            {
                // PrintLine("Found a big block ...");

                // Update the current block's header
                SetHeader(headerPointer, sizeNeed, 1);
                
                int nextHeaderPointer = dataPointer + sizeNeed;

                // If the next block is exists
                // if (1)
                // {
                    // Calculate remaining size
                    int _remainingSize = blockSize - sizeNeed - 1;
                    
                    // If a larger block is allocated than needed
                    if (_remainingSize >= 0)
                    {
                        // Update the next block's header
                        SetHeader(nextHeaderPointer, _remainingSize, 0);
                    };
                // };
                
                return dataPointer;
            };
        };
        
        headerPointer += blockSize + 1;
    };
}

[Builtin("free")]
export void Dealloc(int ptr) {
	int position = ptr;

    int size;
    int allocated;

    GetHeader(ptr - 1, ref size, ref allocated);
    // Print("Size: ");
    // PrintLine(size);
    SetHeader(ptr - 1, size, 0);

	// *(ptr - 1) = 0;

	while (size) {
		*position = 0;
		size--;
		position++;
	};
}

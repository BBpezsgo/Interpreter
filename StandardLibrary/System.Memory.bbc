#if BRAINFUCK
const byte StatusFlag  = 0b_1_0000000;
const byte MaxHeapSize = 0b_0_1111111;
#else
const byte StatusFlag  = 0b_1_0000000;
const byte MaxHeapSize = 0b_0_1111111;
*0 = MaxHeapSize;
#endif

export void GetHeader(byte* ptr, byte* size, byte* allocated)
{
    byte value = *ptr;
    if (value >= StatusFlag) // value & StatusFlag
    {
        *size = value - StatusFlag; // value & ~((byte)StatusFlag)
        *allocated = 1;
    }
    else
    {
        *size = value;
        *allocated = 0;
    }
}

export void SetHeader(byte* ptr, byte size, byte allocated)
{
    if (size > ((int)MaxHeapSize))
    { crash "What"; }

    byte value = size;

    if (allocated)
    {
        value += StatusFlag; // value |= (byte)StatusFlag
    }
    
    *ptr = value;
}

byte JoinFreeBlocks()
{
    byte* headerPointer = 0;
    byte prevBlockSize = (byte)0;
    while (headerPointer < ((int)MaxHeapSize))
    {
        byte blockSize;
        byte blockUsed;
        GetHeader(headerPointer, &blockSize, &blockUsed);

        // This is a free block that is not at the beginning of the heap
        if (headerPointer != 0 && blockUsed == 0)
        {
            byte* prevOffset = headerPointer - ((int)prevBlockSize) - 1;

            byte d;
            byte prevBlockUsed;
            GetHeader(prevOffset, &d, &prevBlockUsed);

            // The previous block is also free
            if (prevBlockUsed == 0)
            {
                // Update the previous block's header
                SetHeader(prevOffset, (byte)(blockSize + prevBlockSize + 1), (byte)0);
                // Remove the current block's header
                *headerPointer = (byte)0;
                return (byte)1;
            }
        }

        prevBlockSize = blockSize;

        // Jump to the next block's header offset
        headerPointer += blockSize + 1;
    }
    return (byte)0;
}

[Builtin("alloc")]
export any* Alloc(int sizeNeed)
{
    if (sizeNeed == 0)
    {
        crash "What";
    }

    byte* headerPointer;
    while (1)
    {
        if (headerPointer >= ((int)MaxHeapSize)) { crash "Out of memory"; }

        byte blockSize;
        byte blockUsed;
        GetHeader(headerPointer, &blockSize, &blockUsed);
        byte* dataPointer = (headerPointer + 1) as byte*;

        if (blockUsed == 0)
        {
            // If the block's size is perfect
            if (blockSize == sizeNeed)
            {
                // Update the current block's header
                SetHeader(headerPointer, (byte)sizeNeed, (byte)1);

                return dataPointer;
            }

            // If the block's size is larger than needed
            if (blockSize > sizeNeed)
            {
                // Update the current block's header
                SetHeader(headerPointer, (byte)sizeNeed, (byte)1);

                byte* nextHeaderPointer = (dataPointer + sizeNeed) as byte*;

                // Calculate remaining size
                byte _remainingSize = blockSize - ((byte)sizeNeed) - 1;

                // If a larger block is allocated than needed
                if (_remainingSize >= 0)
                {
                    // Update the next block's header
                    SetHeader(nextHeaderPointer, _remainingSize, (byte)0);
                }

                return dataPointer;
            }
        }

        headerPointer += blockSize + 1;
    }
    return 0;
}

[Builtin("free")]
export void Dealloc(any* ptr)
{
    byte* position = ptr as byte*;

    byte size;
    byte allocated;

    GetHeader((ptr - 1) as byte*, &size, &allocated);

    if (allocated == 0)
    { return; }

    SetHeader((ptr - 1) as byte*, size, (byte)0);

    // *(ptr - 1) = 0;

    while (size)
    {
        *position = 0;
        size--;
        position++;
    }

    while (JoinFreeBlocks()) { }
}

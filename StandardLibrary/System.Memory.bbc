void GetHeader(int* ptr, ref int size, ref int allocated)
{
    int value = *ptr;
    if (value >= 127) // value & 0b_1000_0000
    {
        value -= 127; // value &= ~0b_1000_0000

        size = value;
        allocated = 1;
    }
    else
    {
        size = value;
        allocated = 0;
    }
}

void SetHeader(int* ptr, int size, int allocated)
{
    int value = size;
    if (allocated)
    { value += 127; } // value |= 0b_1000_0000
    *ptr = value;
}

int JoinFreeBlocks()
{
    int* headerPointer = 0;
    int prevBlockSize = 0;
    while (headerPointer < 127)
    {
        int blockSize;
        int blockUsed;
        GetHeader(headerPointer, ref blockSize, ref blockUsed);
        
        // Print(headerPointer as int);
        // Print(": { size: ");
        // Print(blockSize);
        // Print(" used: ");
        // Print(blockUsed);
        // PrintLine(" }");

        // This is a free block that is not at the beginning of the heap
        if (headerPointer != 0 && blockUsed == 0)
        {
            int* prevOffset = headerPointer - prevBlockSize - 1;

            int d;
            int prevBlockUsed;
            GetHeader(prevOffset, ref d, ref prevBlockUsed);

            // The previous block is also free
            if (prevBlockUsed == 0)
            {
                // Print("Set ");
                // Print(prevOffset as int);
                // Print(" to { size: ");
                // Print(blockSize + prevBlockSize + 1);
                // Print(" }");
                // PrintLine();

                // Update the previous block's header
                SetHeader(prevOffset, blockSize + prevBlockSize + 1, 0);
                // Remove the current block's header
                *headerPointer = 0;
                return 1;
            }
        }

        prevBlockSize = blockSize;

        // Jump to the next block's header offset
        headerPointer += blockSize + 1;
    }
}

[Builtin("alloc")]
export int* Alloc(int sizeNeed)
{
    if (sizeNeed == 0)
    { sizeNeed++; }
    
    // Print("Allocating ");
    // Print(sizeNeed);
    // Print(" ...");
    // PrintLine();

    int* headerPointer = 0;
    while (1)
    {
        if (headerPointer >= 126) { throw "Out of memory"; }

        int blockSize;
        int blockUsed;
        GetHeader(headerPointer, ref blockSize, ref blockUsed);
        int* dataPointer = headerPointer + 1;
        
        // Print("Block #");
        // Print(headerPointer as int);
        // Print(": ");
        // Print("Size: ");
        // Print(blockSize);
        // Print("  Used: ");
        // Print(blockUsed);
        // PrintLine();
        // PrintLine(dataPointer as int);

        if (blockUsed == 0)
        {
            // If the block's size is perfect
            if (blockSize == sizeNeed)
            {
                // Update the current block's header
                SetHeader(headerPointer, sizeNeed, 1);
                
                // PrintLine("Perfect match");
                // Print("Returning ");
                // PrintLine(dataPointer as int);

                return dataPointer;
            }
            
            // If the block's size is larger than needed
            if (blockSize > sizeNeed)
            {
                // PrintLine("Found a big block ...");

                // Update the current block's header
                SetHeader(headerPointer, sizeNeed, 1);
                
                int* nextHeaderPointer = dataPointer + sizeNeed;

                // Calculate remaining size
                int _remainingSize = blockSize - sizeNeed - 1;
                    
                // If a larger block is allocated than needed
                if (_remainingSize >= 0)
                {
                    // Update the next block's header
                    SetHeader(nextHeaderPointer, _remainingSize, 0);
                }
                
                // Print("Returning ");
                // PrintLine(dataPointer as int);
                
                return dataPointer;
            }
        }
        
        headerPointer += blockSize + 1;
    }
}

[Builtin("free")]
template<T>
export void Dealloc(T* ptr)
{
    int* position = ptr as int*;
    // Print("Deallocate ");
    // Print(position - 1);
    // PrintLine();

    int size;
    int allocated;

    GetHeader(ptr - 1, ref size, ref allocated);
    
    if (allocated == 0)
    {
        // PrintLine("Not allocated");
        return;
    }

    // Print("Size: ");
    // PrintLine(size);
    SetHeader(ptr - 1, size, 0);

    // *(ptr - 1) = 0;

    while (size)
    {
        *position = 0;
        size--;
        position++;
    }

    // JoinFreeBlocks();
    while (JoinFreeBlocks()) { }
}

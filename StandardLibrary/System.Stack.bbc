using System.Memory;

template<T>
export struct Stack
{
    private T[]* _array;
    private int _length;
    private int _capacity;

    void EnsureCapacity(int capacity)
    {
        if (!this._array)
        {
            this._array = new T[4]*;
            this._capacity = 4;
        }
        if (this._capacity >= capacity) return;

        this._capacity *= 2;
        T[]* oldArray = this._array;
        T[]* newArray = new T[this._capacity]*;

        for (int i = 0; i < this._length; i++)
        {
            newArray[i] = oldArray[i];
        }

        delete oldArray;
        this._array = newArray;
    }

    export void Push(T item)
    {
        if (!this._array)
        {
            this._array = new T[4]*;
            this._capacity = 4;
        }
        else if (this._capacity <= this._length)
        {
            this._capacity *= 2;
            T[]* oldArray = this._array;
            this._array = new T[this._capacity]*;

            for (int i = 0; i < this._length; i++)
            {
                this._array[i] = oldArray[i];
            }

            delete oldArray;
        }

        this._array[this._length] = item;
        this._length++;
    }

    export T Pop()
    {
        if (!this._length) crash "Stack is empty";
        this._length--;
        return this._array[this._length];
    }

    export destructor()
    {
        if (this._array) delete this._array;
    }
}

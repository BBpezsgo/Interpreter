using System;
using System.Memory;
using System.Lists;

/*
 * Splits the string `string` based on the specified separator `separator` and adds
 * the substring to the list `result`
 */
export void Split(this string string, char separator, List<string>* result)
{
	string current = "";

	for (int i = 0; string[i]; i++)
	{
		if (string[i] == separator)
		{
	        if (!current.IsNullOrEmpty())
			{
				result.Add(current);
				current = "";
			}
		}
		else
		{
			current = (temp current) + string[i];
		}
	}

	if (!current.IsNullOrEmpty())
	{
		result.Add(current);
	}
}

/*
 * Checks if the string `text` is null or its length is zero
 */
export int IsNullOrEmpty(this string text)
{
    if (text)
    {
        if (text[0])
        { return 0; }
        else
        { return 1; }
    }
    else
    { return 1; }
}

/*
 * Copies the string `text` and returns the copy
 */
export string ToString(this string text)
{
    string res = Alloc(text.Length() * sizeof(char) + 1) as string;
    int i = 0;
    while (text[i])
    {
        res[i] = text[i];
        i++;
    }
    res[i] = '\0';
    return res;
}

/*
 * Concatenate the two string `a` and `b`
 * 
 * This will not modify the string `a` or `b`, it will allocates a new one
 */
export string +(temp string a, temp string b)
{
    int al = a.Length();
    int bl = b.Length();

    int lengthSum = al + bl;

    string result = Alloc((lengthSum + 1) * sizeof(char)) as string;
  
    for (int i; i < al; i++)
    {
        result[i] = a[i];
    }
  
    for (int i; i < bl; i++)
    {
        result[al + i] = b[i];
    }

    result[lengthSum] = '\0';

    return result;
}

/*
 * Inserts the character `a` at the start of the string `b`
 * 
 * This will not modify the string `b`, it will allocates a new one
 */
export string +(char a, temp string b)
{
    int length = b.Length();

    string result = Alloc((length + 2) * sizeof(char)) as string;
  
    for (int i; i < length; i++)
    {
        result[i + 1] = b[i];
    }
  
    result[0] = a;

    result[length + 1] = '\0';

    return result;
}

/*
 * Appends the character `b` at the end of the string `a`
 * 
 * This will not modify the string `a`, it will allocates a new one
 */
export string +(temp string a, char b)
{
    int length = a.Length();

    string result = Alloc((length + 2) * sizeof(char)) as string;
  
    for (int i; i < length; i++)
    {
        result[i] = a[i];
    }
  
    result[length] = b;

    result[length + 1] = '\0';

    return result;
}

/*
 * Returns the length of the string `v`
 */
export int Length(this string v)
{
	int i = 0;
	while (v[i])
	{ i++; }
	return i;
}

/*
 * Copies the string `from` to the destination string `to`
 * 
 * Note that both strings must be equal in length
 */
export void CopyString(temp string from, string to)
{
    int i = 0;
    while (from[i] && to[i])
    {
        to[i] = from[i];
        i++;
    }
}

export string Substring(temp this string v, int start)
{
    int newLength = 0;
    int length = v.Length();
    for (int i = start; i < length; i++)
    {
        newLength++;
    }
    string newV = Alloc(newLength * sizeof(char)) as string;
    for (int i = start; i < length; i++)
    {
        newV[i - start] = v[i];
    }
    return newV;
}

export string Substring(temp this string v, int start, int length)
{
    int _length = v.Length();
    string newV = Alloc(Min(_length, start + length) * sizeof(char)) as string;
    for (int i = start; i < Min(_length, start + length); i++)
    {
        newV[i - start] = v[i];
    }
    return newV;
}

/*
 * Reverses the string `v`
 * 
 * This will not modify the string `v`, it will allocates a new one
 */
export string Reverse(temp this string v)
{
    int length = v.Length();
    string newV = Alloc((length + 1) * sizeof(char)) as string;
    for (int i = 0; i < length; i++)
    {
        newV[i] = v[length - 1 - i];
    }
    newV[length] = '\0';
    return newV;
}

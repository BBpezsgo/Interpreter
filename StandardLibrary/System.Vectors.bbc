using System.Math;

export struct Vector2
{
    float x;
    float y;

    export Vector2(float x, float y)
    {
        this.x = x;
        this.y = y;
    }
}

export struct byte2
{
    i8 x;
    i8 y;

    export byte2(i8 x, i8 y)
    {
        this.x = x;
        this.y = y;
    }
}

export void ToByte2(Vector2* a, byte2* b)
{
    b.x = (i8)(int)Round(a.x);
    b.y = (i8)(int)Round(a.y);
}

export void ToFloat2(byte2* a, Vector2* b)
{
    int _x = (int)a.x;
    int _y = (int)a.y;
    if (_x > 127) { _x = -256 + _x; }
    if (_y > 127) { _y = -256 + _y; }
    b.x = (f32)_x;
    b.y = (f32)_y;
}

export float Distance(Vector2 a, Vector2 b)
{
    float dx = a.x - b.x;
    float dy = a.y - b.y;
    return Sqrt((dx * dx) + (dy * dy));
}

export float Distance(byte2 a, byte2 b)
{
    int dx = (int)a.x - (int)b.x;
    int dy = (int)a.y - (int)b.y;
    return Sqrt((float)((dx * dx) + (dy * dy)));
}

export float DistanceSqr(Vector2 a, Vector2 b)
{
    float dx = a.x - b.x;
    float dy = a.y - b.y;
    return (dx * dx) + (dy * dy);
}

export float DistanceSqr(byte2 a, byte2 b)
{
    int dx = (int)a.x - (int)b.x;
    int dy = (int)a.y - (int)b.y;
    return (float)((dx * dx) + (dy * dy));
}

export inline float Dot(Vector2 a, Vector2 b)
{
    return (a.x * b.x) + (a.y * b.y);
}

export inline float Cross(Vector2 a, Vector2 b)
{
    return a.x * b.y - a.y * b.x;
}

export float Magnitude(this Vector2 v)
{
    return Sqrt((v.x * v.x) + (v.y * v.y));
}

export float Magnitude(this Vector2* v)
{
    return Sqrt((v.x * v.x) + (v.y * v.y));
}

export Vector2 Normalised(this Vector2 v)
{
    float d = v.Magnitude();
    v.x /= d;
    v.y /= d;
    return v;
}

export void Normalise(Vector2* v)
{
    float d = v.Magnitude();
    v.x /= d;
    v.y /= d;
}

export void Rotate(Vector2* v, f32 angle)
{
    f32 tx = v.x;
    v.x = v.x * Cos(angle) - v.y * Sin(angle);
    v.y = tx * Sin(angle) + v.y * Cos(angle);
}

export Vector2 Rotated(Vector2 v, f32 angle)
{
    return new Vector2(
        v.x * Cos(angle) - v.y * Sin(angle),
        v.x * Sin(angle) + v.y * Cos(angle)
    );
}

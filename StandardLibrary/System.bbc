#bf "sleep" "void" "int";

#bf "int-to-float" "float" "int";
#bf "float-to-int" "int" "float";

using System.Console;
using System.String;
using System.Memory;
using System.Math;

[Define("boolean")]
enum bool
{
    false = 0,
    true = 1,
}

export String ToString(this bool v)
{
    if (v) { return "true"; }
    else { return "false"; };
}

export String ToString(this byte number)
{
	String result = new String(0);

	if (number == 0) {
	      delete result;
	      result = "0";
	      return result;
	};

	byte v = number;

	while (v > 0)
	{
        byte rem = v % 10;
		
		String newResult = new String(result.length + 1);
		CopyString(result, newResult);
		newResult[result.length] = (rem + 48) as char;
		delete result;
		result = newResult;

		v = v / 10;
	};

	String reversed = result.Reverse();
	delete result;

	return reversed;
}

export String ToString(this int number)
{
	if (number == 0) {
	    return "0";
	};
    
	String result = new String(0);

	int v = number;

	bool isNegative = v < 0;
	if (isNegative)
	{ v = 0 - v; };

	while (v > 0)
	{
        int rem = v % 10;
		
		String newResult = new String(result.length + 1);
		CopyString(result, newResult);
		newResult[result.length] = (rem + 48) as char;
		delete result;
		result = newResult;

		v = v / 10;
	};

    if (isNegative)
    {
        String newResult = new String(result.length + 1);
		CopyString(result, newResult);
        newResult[result.length] = '-';
        delete result;
        result = newResult;
    };

	String reversed = result.Reverse();
	delete result;

	return reversed;
}

[External("sleep")]
export void Sleep(int ms);

export int ParseInt(temp String v)
{
    bool IsNegative = (v[0] == '-');
    String parsing = v;
    if (IsNegative) { parsing = parsing.Substring(1); };
    parsing = parsing.Reverse();
    int result = 0;
    for (int i = 0; i < parsing.length; i++)
    {
        char digit = parsing[i];
        result += (Pow(10, i) * ParseDigit(digit));
    };
    if (IsNegative)
    { result *= -1; };
    return result;
}

export byte ParseByte(temp String v)
{
    bool IsNegative = (v[0] == '-');
    String parsing = v;
    if (IsNegative) { parsing = parsing.Substring(1); };
    parsing = parsing.Reverse();
    int result = 0;
    for (int i = 0; i < parsing.length; i++)
    {
        char digit = parsing[i];
        result += (Pow(10, i) * ParseDigit(digit));
    };
    if (IsNegative)
    { result *= -1; };
    return result;
}

int ParseDigit(char digit)
{
    if (digit == '0') { return 0; }
    elseif (digit == '1') { return 1; }
    elseif (digit == '2') { return 2; }
    elseif (digit == '3') { return 3; }
    elseif (digit == '4') { return 4; }
    elseif (digit == '5') { return 5; }
    elseif (digit == '6') { return 6; }
    elseif (digit == '7') { return 7; }
    elseif (digit == '8') { return 8; }
    elseif (digit == '9') { return 9; }
}

[External("int-to-float")]
export float ToFloat(this int v);

[External("float-to-int")]
export int ToInt(this float v);

export int Random(int state)
{
	// Precomputed parameters for Schrage's method
	int M = 0x7fffffff;
	int A = 48271;
	int Q = M / A;    // 44488
	int R = M % A;    //  3399

	int div = state / Q;	// max: M / Q = A = 48,271
	int rem = state % Q;	// max: Q - 1     = 44,487

	int s = rem * A;	// max: 44,487 * 48,271 = 2,147,431,977 = 0x7fff3629
	int t = div * R;	// max: 48,271 *  3,399 =   164,073,129
	int result = s - t;

	if (result < 0)
    { result += M; };
    
	return result;
}

void memcp(int source, int destination, int size)
{
    for (int offset; offset < size; offset++)
    {
        (*(destination + offset)) = *(source + offset);
    };
}

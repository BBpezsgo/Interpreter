using System.Console;
using System.String;
using System.Memory;
using System.Math;

export char* ToString(this byte number)
{
	if (number == 0)
    { return "0"; }

	char* result = "";

	byte v = number;

	while (v > 0)
	{
        byte rem = v % 10;
        result = (temp result) + ((rem + 48) as char);
		v = v / 10;
	}

	char* reversed = result.Reverse();
	delete result;

	return reversed;
}

export char* ToString(this int number)
{
	if (number == 0)
    { return "0"; }
    
	int v = number;

	int isNegative = v < 0;
	if (isNegative)
	{ v = 0 - v; }
    
    int numberLength = Log10(v) + 2;
    if (isNegative)
    { numberLength++; }

	char* result = Alloc(numberLength) as char*;
    result[numberLength - 1] = '\0';

    if (isNegative)
    {
        result[0] = '-'; 
    }
    
    int i = numberLength - 2;
	while (v > 0)
	{
        int rem = v % 10;
        result[i] = ((rem + 48) as char);
		v = v / 10;
        i--;
	}

    // if (isNegative)
    // {
    //     char* newResult = Alloc((result.Length() + 1) * sizeof(char)) as char*;
	// 	   CopyString(result, newResult);
    //     newResult[result.Length()] = '-';
    //     delete result;
    //     result = newResult;
    // }

	// char* reversed = result.Reverse();
	// delete result;

	return result;
}

[External("sleep")]
export void Sleep(int ms);

export inline int ParseInt(temp char* v)
{
    if (v.IsNullOrEmpty())
    { return 0; }

    int IsNegative = (v[0] == '-');
    temp char* parsing = v;

    if (IsNegative)
    {
        parsing = parsing.Substring(1);
        char* reversed = parsing.Reverse();
        delete parsing;
        parsing = reversed;
    }
    else
    {
        parsing = parsing.Reverse();
    }

    int result = 0;
    for (int i = 0; parsing[i]; i++)
    {
        char digit = parsing[i];
        result += (Pow(10, i) * (digit - '0'));
    }

    if (IsNegative)
    { result *= -1; }

    return result;
}

export inline byte ParseByte(temp char* v)
{
    if (v.IsNullOrEmpty())
    { return 0; }

    int IsNegative = (v[0] == '-');
    temp char* parsing = v;

    if (IsNegative)
    {
        parsing = parsing.Substring(1);
        char* reversed = parsing.Reverse();
        delete parsing;
        parsing = reversed;
    }
    else
    {
        parsing = parsing.Reverse();
    }

    int result = 0;
    for (int i = 0; parsing[i]; i++)
    {
        char digit = parsing[i];
        result += (Pow(10, i) * (digit - '0'));
    }

    if (IsNegative)
    { result *= -1; }

    return result;
}

[External("int-to-float")]
export float ToFloat(this int v);

[External("float-to-int")]
export int ToInt(this float v);

export inline int Random(int state)
{
	// Precomputed parameters for Schrage's method
	int M = 0x7fffffff;
	int A = 48271;
	int Q = M / A;    // 44488
	int R = M % A;    //  3399

	int div = state / Q;	// max: M / Q = A = 48,271
	int rem = state % Q;	// max: Q - 1     = 44,487

	int s = rem * A;	// max: 44,487 * 48,271 = 2,147,431,977 = 0x7fff3629
	int t = div * R;	// max: 48,271 *  3,399 =   164,073,129
	int result = s - t;

	if (result < 0)
    { result += M; };
    
	return result;
}

void memcp(int source, int destination, int size)
{
    for (int offset; offset < size; offset++)
    {
        (*(destination + offset)) = *(source + offset);
    }
}

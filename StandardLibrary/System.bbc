using System.Console;
using System.String;
using System.Memory;
using System.Math;

export string ToString(this byte number)
{
	if (number == 0)
    { return "0"; }

	string result = "";

	byte v = number;

	while (v > 0)
	{
        byte rem = v % 10;
        result = (temp result) + ((rem + 48) as char);
		v = v / 10;
	}

	string reversed = result.Reverse();
	delete result;

	return reversed;
}

export string ToString(this int number)
{
	if (number == 0)
    { return "0"; }
    
	int v = number;

	byte isNegative = v < 0;
	if (isNegative)
	{ v = 0 - v; }
    
    int numberLength = Log10(v) + 2;
    if (isNegative)
    { numberLength++; }

	string result = Alloc(numberLength) as string;
    result[numberLength - 1] = '\0';

    if (isNegative)
    {
        result[0] = '-'; 
    }
    
    int i = numberLength - 2;
	while (v > 0)
	{
        int rem = v % 10;
        result[i] = ((rem + 48) as char);
		v = v / 10;
        i--;
	}

	return result;
}

[External("sleep")]
export void Sleep(int ms);

export inline int ParseInt(temp string v)
{
    if (v.IsNullOrEmpty())
    { return 0; }

    byte isNegative = (v[0] == '-');
    int start;
    int result;
    
    if (isNegative)
    { start = 1; }

    for (int i = start; v[i]; i++)
    {
        char digit = v[i];
        result *= 10;
        result += (digit - '0');
    }
    
    if (isNegative)
    { result *= -1; }

    return result;
}

export inline byte ParseByte(temp string v)
{
    if (v.IsNullOrEmpty())
    { return 0; }

    byte result;
    
    for (int i = 0; v[i]; i++)
    {
        char digit = v[i];
        result *= 10 as byte;
        result += (digit - '0') as byte;
    }
    
    return result;
}

/*
 * Source: https://en.wikipedia.org/wiki/Lehmer_random_number_generator
 */
export inline int Random(int state)
{
	// Precomputed parameters for Schrage's method
	int M = 0x7fffffff;
	int A = 48271;
	int Q = M / A;    // 44488
	int R = M % A;    //  3399

	int div = state / Q;	// max: M / Q = A = 48,271
	int rem = state % Q;	// max: Q - 1     = 44,487

	int s = rem * A;	// max: 44,487 * 48,271 = 2,147,431,977 = 0x7fff3629
	int t = div * R;	// max: 48,271 *  3,399 =   164,073,129
	int result = s - t;

	if (result < 0)
    { result += M; };
    
	return result;
}

using System;
using System.Lists;
using System.Math;

[CodeEntry]
void Start()
{
	float A = 20f;
	float B = 20f;

	int screen_width = 50;
    int screen_height = 20;

    int yes = 0;

	float R1 = 1f;
	float R2 = 2f;

	float K2 = 5f;
    float K1 = screen_width.ToFloat() * K2 * 3f / (20f * (R1 + R2));

    Map zbuffer = new Map(screen_width, screen_height);

    while (0 == yes)
    {
        A += 0.1f;
        B -= 0.1f;

        for (int y; y < screen_height; y++)
        {
            for (int x; x < screen_width; x++)
            {
                zbuffer.Set(x, y, 0);
            };
        };

        RenderFrame(A, B, R1, R2, K1, K2, zbuffer);
    };
    
    for (int y = 0; y < screen_height; y++)
    {
        PrintD("\r\n");
    };
}

adaptive void RenderFrame(float A, float B, float R1, float R2, float K1, float K2, Map zbuffer)
{
    float PI = 3.1415f;

	int screen_width = 50;
	int screen_height = 20;

	float theta_spacing = 0.2f;
	float phi_spacing = 0.05f;

    Clear();

    float cosA = Cos(A);
    float sinA = Sin(A);

    float cosB = Cos(B);
    float sinB = Sin(B);

    // theta goes around the cross-sectional circle of a torus
    for (float theta = 0f; theta < 2 * PI; theta += theta_spacing)
    {
        // precompute sines and cosines of theta
        float costheta = Cos(theta);
        float sintheta = Sin(theta);

        // phi goes around the center of revolution of a torus
        for (float phi = 0f; phi < 2 * PI; phi += phi_spacing)
        {
            // precompute sines and cosines of phi
            float cosphi = Cos(phi);
            float sinphi = Sin(phi);

            // the x,y coordinate of the circle, before revolving (factored out of the above equations)
            float circlex = R2 + R1 * costheta;
            float circley = R1 * sintheta;

            // final 3D (x,y,z) coordinate after rotations, directly from our math above
            float x = circlex * (cosB * cosphi + sinA * sinB * sinphi) - circley * cosA * sinB;
            float y = circlex * (sinB * cosphi - sinA * cosB * sinphi) + circley * cosA * cosB;
            float z = K2 + cosA * circlex * sinphi + circley * sinA;
            float ooz = (1f / z);

            // x and y projection.  note that y is negated here, because y goes up in 3D space but down on 2D displays.
            int xp = (screen_width / 2f + K1 * ooz * x).ToInt();
            int yp = (screen_height / 2f - K1 * ooz * y).ToInt();

            // calculate luminance.  ugly, but correct.
            float L = cosphi * costheta * sinB - cosA * costheta * sinphi - sinA * sintheta + cosB * (cosA * sintheta - costheta * sinA * sinphi);
            // L ranges from -sqrt(2) to +sqrt(2).  If it's < 0, the surface is pointing away from us, so we won't bother trying to plot it.
            if (L > 0)
            {
                // test against the z-buffer. larger 1/z means the pixel is closer to the viewer than what's already plotted.
                if (xp >= 0 && yp >= 0 && xp < screen_width && yp < screen_height && ooz * 1000f > zbuffer.Get(xp, yp))
                {
                    zbuffer.Set(xp, yp, (ooz * 1000f).ToInt());
                    int luminance_index = (L * 2f).ToInt();
                    if (luminance_index == 0) { Set('░', xp, yp); }
                    elseif (luminance_index == 1) { Set('▒', xp, yp); }
                    elseif (luminance_index == 2) { Set('▓', xp, yp); }
                    elseif (luminance_index == 3) { Set('█', xp, yp); };
                };
            };
        };
    };
}